.. SPDX-FileCopyrightText: 2021 Hyperledger
   SPDX-License-Identifier: CC-BY-4.0

@startuml watcher
!pragma teoz true
hide footbox

participant "Main component" as main_component
participant "Watching Component\nRemote or Local" as watcher
participant "Blockchain" as blockchain

group Initialize Watcher
watcher -> watcher: Initialize watcher

opt if remote watcher
watcher -> watcher: Initialize remote API server
end


end

group Open phase
activate main_component
main_component -> main_component: Open Channel
main_component -> watcher: Start Watching
watcher -> blockchain: Subscribe to events\nfor this channel ID
activate watcher
activate blockchain
end

group Transact phase 
main_component <-> main_component: Off-chain transactions
opt Periodically
main_component -> watcher: Updated off-chain state
watcher -> watcher: Store the new state\nand discard older one
end
end

group Register phase
loop until the stop watching command it received
blockchain -> blockchain: State registered by\nany participant
watcher <- blockchain: State registered\non the blockchain
main_component <- watcher: State registered\non the blockchain
note over main_component, watcher #LightGray
This update is sent to inform the main component
that state has been registered and refutation will
be automatically done by the watcher, if required.
end note
opt if registered state is not latest
watcher -> blockchain: Register latest\noff-chain state
note over watcher #LightGray
Once this succeeds, watcher will receive another
"State registered on the blockchain" notification
end note
end
opt if main component has not sent\nthe latest state to the watcher
main_component -> watcher: Latest off-chain state
end
end
end


group Settle phase 
main_component -> watcher: Stop watching
watcher -> blockchain: Unsubscribe from events\nfor this channel ID
deactivate blockchain
deactivate watcher
main_component -> main_component: Settle channel
end



@enduml
